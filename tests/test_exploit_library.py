import importlib.util
import json
import sqlite3
import sys
import types
from datetime import datetime
from pathlib import Path

pandas_stub = sys.modules.setdefault("pandas", types.ModuleType("pandas"))
setattr(pandas_stub, "read_sql_query", getattr(pandas_stub, "read_sql_query", lambda *_, **__: None))

vectors_path = Path(__file__).resolve().parents[1] / "darkfield" / "library" / "vectors.py"
spec = importlib.util.spec_from_file_location("darkfield.library.vectors", vectors_path)
vectors_module = importlib.util.module_from_spec(spec)
assert spec.loader is not None
spec.loader.exec_module(vectors_module)

ExploitLibrary = vectors_module.ExploitLibrary


def test_add_exploit_persists_created_at(tmp_path):
    db_path = tmp_path / "library.db"
    library = ExploitLibrary(str(db_path))

    exploit = {
        "id": "exploit-1",
        "category": "test",
        "trait": "curiosity",
        "objective": "do something",
        "payload": "payload",
        "vector_norm": 1.0,
        "success_rate": 0.5,
        "stealth_score": 0.3,
        "complexity": 3,
        "timestamp": datetime.utcnow().isoformat(),
        "metadata": {},
    }

    assert library.add_exploit(exploit)

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT created_at FROM exploits WHERE id = ?", (exploit["id"],))
    row = cursor.fetchone()
    conn.close()

    assert row is not None
    assert row[0] is not None


def test_backfill_copies_metadata_timestamp(tmp_path):
    db_path = tmp_path / "legacy.db"
    library = ExploitLibrary(str(db_path))

    legacy_metadata = json.dumps({"timestamp": "2024-01-01T00:00:00"})
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO exploits (id, category, trait, objective, payload, vector_norm,
                              success_rate, stealth_score, complexity, created_at,
                              tested_models, tags, metadata)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (
            "legacy-exploit",
            "legacy",
            None,
            None,
            "payload",
            0.0,
            0.0,
            0.0,
            0,
            None,
            json.dumps([]),
            json.dumps([]),
            legacy_metadata,
        ),
    )
    conn.commit()
    conn.close()

    # Re-initialize to trigger backfill migration
    library = ExploitLibrary(str(db_path))

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT created_at FROM exploits WHERE id = ?", ("legacy-exploit",)
    )
    row = cursor.fetchone()
    conn.close()

    assert row is not None
    assert row[0] == "2024-01-01T00:00:00"
